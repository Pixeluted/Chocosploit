//
// Created by Pixeluted on 05/05/2025.
//
#pragma once
#include "lua.h"
#include "Imgui/imgui.h"
extern ImFont* SystemFont;
extern ImFont* PlexFont;
extern ImFont* MonospaceFont;

#include "../../Managers/Render/RenderManager.hpp"

enum RenderObjectType : uint8_t {
    Line = 0,
    Circle,
    Square,
    Quad,
    Triangle,
    Text,
    Image
};

enum TextFont : uint8_t {
    UI = 0,
    System,
    Plex,
    Monospace
};

static int indexDestroyRef;
struct DrawingObj final : ExploitObject<DrawingObject> {
    const char* GetObjectMtName() override;
    void InitializeObjectMetatable(lua_State* L) override;

    RenderObjectType objectType;
    bool isVisible;
    uint64_t zIndex;
    float transparency;
    ImVec4 color;

    struct {
        ImVec2 from;
        ImVec2 to;
        float thickness;
    } line;

    struct {
        int numsides;
        float radius;
        ImVec2 position;
        float thickness;
        bool filled;
    } circle;

    struct {
        ImVec2 size;
        ImVec2 position;
        float thickness;
        bool filled;
    } square;

    struct {
        ImVec2 pointA;
        ImVec2 pointB;
        ImVec2 pointC;
        ImVec2 pointD;
        float thickness;
        bool filled;
    } quad;

    struct {
        ImVec2 pointA;
        ImVec2 pointB;
        ImVec2 pointC;
        float thickness;
        bool filled;
    } triangle;

    struct {
        std::string text;
        ImVec2 position;
        float size;
        TextFont font;
        bool center;
        bool outline;
        ImVec4 outlineColor;
        ImVec2 textBounds;
    } text;

    struct {
        std::vector<uint8_t> data;
        ImVec2 position;
        ImVec2 size;
        float rounding;
        ImTextureID textureId;
        bool textureCreated;
    } image;

    [[nodiscard]] ImFont* GetDrawFont() const {
        if (objectType == Text) {
            switch (text.font) {
                case UI:
                    return ImGui::GetFont();
                case System:
                    return SystemFont;
                case Plex:
                    return PlexFont;
                case Monospace:
                    return MonospaceFont;

                default:
                    throw std::runtime_error("n is STILl trying");
            }
        }
        throw std::runtime_error("Nice try n");
    }

    void UpdateTextBounds() {
        if (objectType == Text) {
            const ImVec2 textSize = GetDrawFont()->CalcTextSizeA(
                text.size,
                FLT_MAX,
                0.0f,
                text.text.c_str()
            );

            text.textBounds = textSize;
        }
    }

    ~DrawingObj() override {
        if (objectType == Image && image.textureCreated) {
            const auto textureView = reinterpret_cast<ID3D11ShaderResourceView*>(image.textureId);
            textureView->Release();
            image.textureId = 0;
        }
    }
};
