//
// Created by Pixeluted on 04/05/2025.
//
#pragma once
#include <format>
#include <memory>

#include "lua.h"
#include "lualib.h"
#include "Windows.h"

constexpr uint8_t EXPLOIT_OBJECT_TAG = 69;

enum ExploitObjectType : uint8_t {
    NO_OBJECT = 0,
    DrawingObject,
    WebsocketObject,
    ConnectionObject
};

#define luaL_toexploitobject(L, index, objectType) *static_cast<std::shared_ptr<objectType> *>(lua_touserdata(L, index))

bool IsExploitObject(lua_State *L, int index);

bool IsSpecificExploitObject(lua_State *L, int index, ExploitObjectType specificType);

void CheckExploitObject(lua_State *L, int index, ExploitObjectType expectedType);

void InitializeExploitObjects(lua_State *L);

template<ExploitObjectType objectType>
struct ExploitObject {
    virtual ~ExploitObject() = default;

    friend std::shared_ptr;
    ExploitObjectType exploitObjectType = objectType;

    virtual const char* GetObjectMtName() {
        throw std::runtime_error("Base object");
    }

    virtual void InitializeObjectMetatable(lua_State* L) {
        throw std::runtime_error("Base object");
    }

    void PushInheritedMt(lua_State *L) {
        luaL_getmetatable(L, "ExploitObject");
        lua_clonetable(L, -1);
        lua_remove(L, -2); // Remove base MT
        lua_pushvalue(L, -1);
        lua_setfield(L, LUA_REGISTRYINDEX, this->GetObjectMtName());
    }

    static const char *ToString(const ExploitObjectType exploitObjectType) {
        switch (exploitObjectType) {
            case DrawingObject:
                return "Drawing";
            case WebsocketObject:
                return "Websocket";
            case ConnectionObject:
                return "Connection";

            default:
                return "Unknown";
        }
    }

    static void ExploitObject__Destructor(lua_State *L, void *userdata) {
        const auto exploitObject = static_cast<std::shared_ptr<ExploitObject<NO_OBJECT> > *>(userdata);
        exploitObject->~shared_ptr();
    }

    static int ExploitObject__ToString(lua_State *L) {
        CheckExploitObject(L, 1, NO_OBJECT);
        const auto exploitObject = luaL_toexploitobject(L, 1, ExploitObject<NO_OBJECT>);

        lua_pushstring(L, std::format("{}: 0x{:x}",
                                      ExploitObject<NO_OBJECT>::ToString(exploitObject->exploitObjectType),
                                      reinterpret_cast<uintptr_t>(exploitObject.get())).c_str());
        return 1;
    }

    void BuildLuaObject(lua_State *L, const std::shared_ptr<ExploitObject> &managingPtr) {
        const auto newLuaObject = static_cast<std::shared_ptr<ExploitObject> *>(lua_newuserdatatagged(
            L, sizeof(std::shared_ptr<ExploitObject>), EXPLOIT_OBJECT_TAG));
        new(newLuaObject) std::shared_ptr(managingPtr);

        luaL_getmetatable(L, this->GetObjectMtName());
        lua_setmetatable(L, -2);
    }

    ExploitObject() = default;
};