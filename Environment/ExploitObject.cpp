//
// Created by Pixeluted on 04/05/2025.
//
#include "ExploitObject.hpp"

#include <format>

#include "../Managers/Render/RenderManager.hpp"
#include "ExploitObjects/Connection.hpp"
#include "ExploitObjects/Websocket.hpp"

bool IsExploitObject(lua_State *L, const int index) {
    return lua_userdatatag(L, index) == EXPLOIT_OBJECT_TAG;
}

bool IsSpecificExploitObject(lua_State *L, const int index, const ExploitObjectType specificType) {
    return IsExploitObject(L, index) && static_cast<std::shared_ptr<ExploitObject<NO_OBJECT> > *>(
               lua_touserdata(L, index))->get()->exploitObjectType == specificType;
}

void CheckExploitObject(lua_State *L, const int index, const ExploitObjectType expectedType) {
    if (!IsExploitObject(L, index))
        luaL_argerrorL(L, index, std::format("Expected {}, got {}", ExploitObject<NO_OBJECT>::ToString(expectedType),
                                             luaL_typename(L, index)).c_str());

    /*
     * No object means the caller doesn't care which exploit object it is, just that it is one.
     */
    if (expectedType == NO_OBJECT)
        return;

    const auto exploitObject = luaL_toexploitobject(L, index, ExploitObject<NO_OBJECT>);
    if (exploitObject->exploitObjectType != expectedType)
        luaL_argerrorL(L, index, std::format("Expected {}, got {}", ExploitObject<NO_OBJECT>::ToString(expectedType),
                                             ExploitObject<NO_OBJECT>::ToString(exploitObject->exploitObjectType)).
                       c_str());
}

void InitializeExploitObjects(lua_State *L) {
    lua_setuserdatadtor(L, EXPLOIT_OBJECT_TAG, ExploitObject<NO_OBJECT>::ExploitObject__Destructor);
    luaL_newmetatable(L, "ExploitObject");

    lua_pushcfunction(L, ExploitObject<NO_OBJECT>::ExploitObject__ToString, "ExploitObject__ToString");
    lua_setfield(L, -2, "__tostring");

    lua_setreadonly(L, -1, true);
    lua_pop(L, 1); // Pop the mt

    // Initialize here all custom MTs of objects, yes u need instantiate a one bc virtual yap
    DrawingObj().InitializeObjectMetatable(L);
    Websocket().InitializeObjectMetatable(L);
    Connection().InitializeObjectMetatable(L);
}
